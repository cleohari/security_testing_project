package tests.suite;

import com.gargoylesoftware.htmlunit.ScriptException;
import net.sourceforge.jwebunit.junit.WebTester;
import org.aeonbits.owner.ConfigFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import tests.utilities.Environment;
import tests.utilities.Helper;

import java.io.IOException;

import static org.junit.Assert.assertTrue;

/**
 * Proof of concept for the XSS vulnerability #24.
 * NB: this vulnerability was NOT among the "min" files generated by Pixy.
 *
 * @author Davide Pedranz
 */
public final class Vulnerability24 {

    // dependencies
    private WebTester tester;
    private Helper helper;

    @Before
    public void prepare() {
        final Environment environment = ConfigFactory.create(Environment.class, System.getenv());
        tester = new WebTester();
        tester.setBaseUrl(environment.baseURL());
        helper = new Helper(environment, tester);
    }

    @Test
    public void test() {

        // this is a stored XSS vulnerability... login as admin
        helper.loginAsAdmin();

        // edit the student (vulnerable form)
        tester.clickLinkWithText("Students");
        tester.assertMatch("Manage Students");
        tester.setWorkingForm("students");
        tester.checkCheckbox("delete[]");
        tester.clickButtonWithText("Edit");
        tester.setWorkingForm("editstudent");
        tester.setTextField("fname", "<script>alert(\""); // xss string [start]
        tester.setTextField("lname", "xs\");</script>");  // xss string [cont]

        // workaround: the attack creates invalid HTML on this page
        try {
            tester.clickButtonWithText("Edit Student");
        } catch (RuntimeException e) {
            assertTrue(e.getCause() instanceof ScriptException);
            assertTrue(e.getMessage().contains("unterminated string literal"));
        }

        // check if the XSS was successful, on the student home page
        helper.loginAsStudent();
        tester.assertNoMatch("<script>alert(\" xs\")</script>");
        helper.assertRawText("&lt;script&gt;alert(&quot; xs&quot;);&lt;/script&gt;'s Classes");
    }

    @After
    public void cleanup() throws IOException {
        helper.cleanupTestStudent();
    }
}
